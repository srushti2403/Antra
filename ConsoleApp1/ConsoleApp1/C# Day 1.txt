Part 1:
Que 1: What type would you choose for the following “numbers”?
- string
- double or float
- int
- enum or string
- decimal
- string or long
- decimal
- double or float
- long
- double or long
- int

Que 2: What are the difference between value type and reference type variables? What is boxing and unboxing?
Value type: 
    - Data is stored on stack.
    - Variable is the data.
    - When copied, full independent copy of data is made.
    - Cleared when the scope ends.
Reference type:
    - Actual object data is stored on heap. The variable stores the memory address pointing to the object.
    - Variable is a pointer to the data.
    - When copied, only memory address is copied.
    - Lifecycle managed by garbage collector.
Boxing: The process of converting a value type to an object type or interface type.
Unboxing: The process of converting an object type back to value type.

Que 3: What is meant by the terms managed resource and unmanaged resource in .NET?
Managed resources: CLR and garbage collector
                   Memory is reclaimed by GC when objects are no longer referenced.
Unmanaged resources: Outside CLR
                     Must be explicitly removed by developer.

Que 4: Whats the purpose of Garbage Collector in .NET?
The Garbage Collector (GC) in .NET automatically manages memory for managed objects on the heap, preventing memory leaks. It reclaims memory from unused objects and compacts the heap to reduce fragmentation, significantly simplifying development.

Part 2:
Ans 1: It throws a DivideByZeroException at runtime.
Ans 2: It results in the special value Double.PositiveInfinity or Double.NegativeInfinity (or NaN if the numerator is 0).
Ans 3: The value wraps around (e.g., maximum $\rightarrow$ minimum) and execution continues silently, unless the code is in an checked block, which would throw an OverflowException.
Ans 4: x = y++; uses the current value of y for x, then increments y (post-increment); x = ++y; increments y first, then uses the new value for x (pre-increment).
Ans 5: break immediately exits the entire loop; continue skips the rest of the current iteration and moves to the next; return exits the entire method containing the loop.
Ans 6: The three parts are the initializer, the condition, and the iterator, and all three are technically optional (but the semicolons are required).
